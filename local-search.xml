<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>binlog和redolog</title>
    <link href="/2021/03/07/MySQL%E7%9A%84binlog%E5%92%8Credolog/"/>
    <url>/2021/03/07/MySQL%E7%9A%84binlog%E5%92%8Credolog/</url>
    
    <content type="html"><![CDATA[<h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><ul><li><p><strong>什么是binlog</strong></p><p><code>binlog</code>是一种逻辑日志，用于记录数据库执行的写入性操作，并且它是由<code>Server</code>层（使用任何存储引擎的<code>mysql</code>数据库都会记录）进行记录，以二进制的形式保存在磁盘中。</p><blockquote><p>逻辑日志：<strong>可以简单理解为记录的就是sql语句</strong>。</p><p>物理日志：<strong>因为<code>mysql</code>数据最终是保存在数据页中的，物理日志记录的就是数据页变更</strong>。</p></blockquote><p><code>binlog</code>是通过<strong>追加</strong>的方式进行写入的，可以通过<code>max_binlog_size</code>参数设置每个<code>binlog</code>文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。</p></li><li><p><strong>binlog使用场景</strong></p><blockquote><p>在实际应用中，<code>binlog</code>的主要使用场景有两个，分别是<strong>主从复制</strong>和<strong>数据恢复</strong>。</p></blockquote><ul><li><strong>主从复制</strong>：在<code>Master</code>端开启<code>binlog</code>，然后将<code>binlog</code>发送到各个<code>Slave</code>端，<code>Slave</code>端重放<code>binlog</code>从而达到主从数据一致。</li><li><strong>数据恢复</strong>：通过使用<code>mysqlbinlog</code>工具来恢复数据。</li></ul></li><li><p><strong>binlog刷盘时机</strong></p><p>对于<code>InnoDB</code>存储引擎而言，只有在事务提交时才会记录<code>binlog</code>，此时记录还在内存中，那么<code>biglog</code>是什么时候刷到磁盘中的呢？<code>mysql</code>通过<code>sync_binlog</code>参数控制<code>binlog</code>的刷盘时机，取值范围是<code>0-N</code>：</p><ul><li>0：不去强制要求，由系统自行判断何时写入磁盘；</li><li>1：每次<code>commit</code>的时候都要将<code>binlog</code>写入磁盘；</li><li>N：每N个事务，才会将<code>binlog</code>写入磁盘。</li></ul><p>从上面可以看出，<code>sync_binlog</code>最安全的是设置是<code>1</code>，这也是<code>MySQL 5.7.7</code>之后版本的默认值。但是设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。</p></li><li><p><strong>binlog日志格式</strong></p><p><code>binlog</code>日志有三种格式，分别为<code>STATMENT</code>、<code>ROW</code>和<code>MIXED</code>。</p><blockquote><p>在 <code>MySQL 5.7.7</code>之前，默认的格式是<code>STATEMENT</code>，<code>MySQL 5.7.7</code>之后，默认值是<code>ROW</code>。日志格式通过<code>binlog-format</code>指定。</p></blockquote><ul><li><code>STATMENT</code> <strong>基于</strong><code>SQL</code><strong>语句的复制(</strong><code>statement-based replication, SBR</code><strong>)，每一条会修改数据的sql语句会记录到</strong><code>binlog</code><strong>中</strong>。优点：<strong>不需要记录每一行的变化，减少了</strong><code>binlog</code><strong>日志量，节约了</strong><code>IO</code><strong>, 从而提高了性能</strong>；缺点：<strong>在某些情况下会导致主从数据不一致，比如执行</strong><code>sysdate()</code><strong>、</strong><code>slepp()</code><strong>等</strong>。</li><li><code>ROW</code> <strong>基于行的复制(</strong><code>row-based replication, RBR</code><strong>)，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了</strong>。优点：<strong>不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题</strong>；缺点：<strong>会产生大量的日志，尤其是</strong><code>alter table</code><strong>的时候会让日志暴涨</strong></li><li><code>MIXED</code> <strong>基于</strong><code>STATMENT</code><strong>和</strong><code>ROW</code><strong>两种模式的混合复制(</strong><code>mixed-based replication, MBR</code><strong>)，一般的复制使用</strong><code>STATEMENT</code><strong>模式保存</strong><code>binlog</code><strong>，对于</strong><code>STATEMENT</code><strong>模式无法复制的操作使用</strong><code>ROW</code><strong>模式保存</strong><code>binlog</code></li></ul></li></ul><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><ul><li><p><strong>为什么需要redo log</strong>？</p><p><strong>redolog是InnoDB引擎特有的日志，主要是用来提升Mysql的更新效率的。</strong>因为如果每一次的更新操作都写进磁盘，然后磁盘也要找到那条记录，然后再更新，整个过程IO成本、查找成本都很高。</p><ul><li><p>它是一种<strong>WAL</strong>技术（Write-Ahea Logging），关键点就是MySQL 的每次写操作并不是立刻写到磁盘上，而是先记录在日志上，然后在合适的时间再更新到磁盘上。</p></li><li><p>并且它还可以保证<strong>crash-safe</strong>，就是说，即使数据库发生异常重启，之前提交的记录也不会丢失。</p><blockquote><p>IO性能问题：</p><ul><li>因为<code>Innodb</code>是以<code>页</code>为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！</li><li>一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！</li></ul></blockquote></li></ul></li><li><p><strong>redo log 的刷盘策略</strong></p><p><code>redo log</code>包括两部分：一个是内存中的日志缓冲(<code>redo log buffer</code>)，另一个是磁盘上的日志文件(<code>redo log file</code>)。</p><p><code>mysql</code>每执行一条<code>DML</code>语句，先将记录写入<code>redo log buffer</code>，后续某个时间点再一次性将多个操作记录写到<code>redo log file</code>。</p><blockquote><p>在操作系统中，用户空间(<code>user space</code>)下的缓冲区数据一般情况下是先写入操作系统内核空间(<code>kernel space</code>)缓冲区(<code>OS Buffer</code>)，再同步到磁盘中。</p></blockquote><div align=center>    <img src="/img/MySQL/21.png" style="zoom:75%;" /></div><p>它的写入同步机制，可以通过<code>innodb_flush_log_at_trx_commit</code>参数配置：</p><blockquote><ul><li>0（延迟写）:事务提交时不会将redo log buffer中日志写入到os buffer，而是每秒写入os buffer并调用fsync()写入到redo log file中。也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据。</li><li>1（实时写，实时刷）:事务每次提交都会将redo log buffer中的日志写入os buffer并调用fsync()刷到redo log file中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO的性能较差。</li><li>2（实时写，延迟刷）:每次提交都仅写入到os buffer，然后是每秒调用fsync()将os buffer中的日志写入到redo log file。</li></ul></blockquote><div align=center>    <img src="/img/MySQL/22.png" style="zoom:75%;" /></div></li><li><p><strong>redo log记录形式</strong></p><p><code>redo log</code>实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志。可以把它当成一个环。</p><blockquote><p><code>redo log</code>实际上记录数据页的变更，而这种变更记录是没必要全部保存；当内存中的脏页刷新到磁盘中后就可以清除掉。</p></blockquote><div align=center>    <img src="/img/MySQL/23.png" style="zoom:50%;" /></div><ul><li><p><code>redolog</code> 有两个指针：<code>write pos</code>：是当前记录的位置，一边写一边后移；</p></li><li><p><code>checkpoint</code> 是当前要擦除的位置，在擦除记录前需要将内存中的操作更新到数据文件。</p></li><li><p>从 <code>write pos</code> 到 <code>checkpoint</code> 是 <code>redolog</code> 空着的部分，可以用来记录新的操作</p></li><li><p>如果 <code>write pos</code> 追上了 <code>checkpoint</code>，表明 <code>redolog</code> 满了，这时候不能再执行新的更新了，这时候需要将内存中的<strong>脏页</strong>刷到磁盘中。更新完之后，<code>checkpoint</code> 就可以继续往前推进。</p><blockquote><p>脏页：跟磁盘数据页内容不一致的内存数据页</p></blockquote></li></ul></li><li><p><strong>mysql的刷脏页（flush）时机</strong></p><ul><li><p>InnoDB的redo log写满了，也就 <code>write pos</code> 追上了 <code>checkpoint</code>，这时候需要将<code>checkpoint</code>后面的日志所对应的脏页<strong>flush</strong>到磁盘上。</p></li><li><p>内存不足的时候，如果需要淘汰掉“脏页”，就要先将脏页写到磁盘里。</p><blockquote><p>为什么不直接淘汰？</p><ul><li>淘汰前必刷盘，为了性能</li><li>这样在读取数据时，如果内存里没有数据，就可以肯定数据文件上是正确的结果，读入内存后返回。</li></ul></blockquote></li><li><p>系统空闲的时候</p></li><li><p>MySQL正常关闭的情况。这时候，MySQL会把内存的脏页都flush到磁<br>盘上，这样下次MySQL启动的时候，就可以直接从磁盘上读数据，启动速度会很快。</p></li></ul></li><li><p><strong>mysql的刷脏页的控制策略</strong></p><blockquote><ol><li>尽量避免redolog写满，整个系统会被堵住，不能再接受新的跟新。</li><li>内存不够用。InnoDB用缓冲池（buffer pool）管理内存，缓冲池中的内存页有三种状态：还没有使用的；使用了并且是干净页；使用了并且是脏页。需要控制脏页的比例。</li></ol></blockquote><ul><li><p>需要设置主机的IO能力，将<strong>innodb_io_capacity</strong>这个参数设置成磁盘的IOPS（全力刷能刷多块）</p></li><li><p><strong>innodb_max_dirty_pages_pct</strong>是脏页比例上限参数，默认值是75%。</p><p>根据<strong>当前的脏页比例</strong>和<strong>当前日志序号与checkPoint的距离</strong>计算出最优百分比，Innodb会按最大性能x这个百分比的速度来刷脏页。</p></li><li><p>innodb_flush_neighbors 参数，“连坐”机制，表示当前要刷的脏页的邻居也是脏页，会顺带刷掉。在机械硬盘中可以减少很多随机IO。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
