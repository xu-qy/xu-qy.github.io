<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>动手实现一个Spring</title>
    <link href="/2021/03/15/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AASpring/"/>
    <url>/2021/03/15/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AASpring/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="/2021/03/09/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88JDK1.8%EF%BC%89/"/>
    <url>/2021/03/09/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88JDK1.8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>HashMap 最早出现在 JDK 1.2中，底层基于散列算法实现。HashMap 允许 null 键和 null 值，在计算哈键的哈希值时，null 键哈希值为 0。HashMap 并不保证键值对的顺序，这意味着在进行某些操作后，键值对的顺序可能会发生变化。另外，需要注意的是，HashMap 是非线程安全类，在多线程环境下可能会存在问题。在本篇文章中，我将会对 HashMap 中常用方法、重要属性及相关方法进行分析。</p><h4 id="几个初始值"><a href="#几个初始值" class="headerlink" title="几个初始值"></a>几个初始值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 默认初始容量 - 必须是 2 的幂</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 最大容量，在两个带参数的构造函数隐式指定更高值时使用。必须是 2 的幂 &lt;= 1&lt;&lt;30。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 在构造函数中未指定时使用的负载因子。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    使用树而不是列表的 bin 计数阈值。将元素添加到至少具有这么多节点的 bin 时，bin 会转换为树。该值必须大于 2 且至少应为 8，以与树移除中关于在收缩时转换回普通 bin 的假设相匹配。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 在调整大小操作期间取消（拆分）bin 的 bin 计数阈值。应小于 TREEIFY_THRESHOLD，最多为 6 以在移除下进行收缩检测。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    可以将 bin 树化的最小表容量。 （否则，如果 bin 中的节点过多，则表将调整大小。）应至少为 4 TREEIFY_THRESHOLD，以避免调整大小和树化阈值之间发生冲突。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;<br></code></pre></td></tr></table></figure><h4 id="put过程-amp-源码"><a href="#put过程-amp-源码" class="headerlink" title="put过程&amp;源码"></a>put过程&amp;源码</h4><div align=center>    <img src="/img/java基础/1.png" style="zoom:50%;" /></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 函数使用原型</span><br><span class="hljs-comment">  */</span><br>map.put(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-number">2</span>);<br>map.put(<span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-number">1</span>);<br>map.put(<span class="hljs-string">&quot;iOS&quot;</span>, <span class="hljs-number">3</span>);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 源码分析：主要分析HashMap的put函数</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>       <span class="hljs-comment">// 1. 对传入数组的键Key计算Hash值 -&gt;&gt;分析1</span><br>       <span class="hljs-comment">// 2. 再调用putVal（）添加数据进去 -&gt;&gt;分析2</span><br>       <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>由于数据结构中加入了红黑树，所以在存放数据到哈希表中时，需进行多次数据结构的判断：<strong>数组、红黑树、链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分析2：putVal(hash(key), key, value, false, true)</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-function"><span class="hljs-params">         <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br><br>Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;<br><br>    <span class="hljs-comment">// 1. 若哈希表的数组tab为空，则 通过resize() 创建</span><br>    <span class="hljs-comment">// 所以，初始化哈希表的时机 = 第1次调用put函数时，即调用resize() 初始化创建</span><br>    <span class="hljs-comment">// 关于resize（）的源码分析将在下面讲解扩容时详细分析，此处先跳过</span><br><span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>n = (tab = resize()).length;<br><br>    <span class="hljs-comment">// 2. 计算插入存储的数组索引i：根据键值key计算的hash值 得到</span><br>    <span class="hljs-comment">// 此处的数组下标计算方式 = i = (n - 1) &amp; hash，同JDK 1.7中的indexFor（），上面已详细描述</span><br><br>    <span class="hljs-comment">// 3. 插入时，需判断是否存在Hash冲突：</span><br>    <span class="hljs-comment">// 若不存在（即当前table[i] == null），则直接在该数组位置新建节点，插入完毕</span><br>    <span class="hljs-comment">// 否则，代表存在Hash冲突，即当前存储位置已存在节点，则依次往下判断：a. 当前位置的key是否与需插入的key相同、b. 判断需插入的数据结构是否为红黑树 or 链表</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);  <span class="hljs-comment">// newNode(hash, key, value, null)的源码 = new Node&lt;&gt;(hash, key, value, next)</span><br><br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br><br>        <span class="hljs-comment">// a. 判断 table[i]的元素的key是否与 需插入的key一样，若相同则 直接用新value 覆盖 旧value</span><br>        <span class="hljs-comment">// 判断原则：equals（）</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp; <span class="hljs-comment">// p 为tab[i]的节点，k 为节点的key</span><br>            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br><br>        <span class="hljs-comment">// b. 继续判断：需插入的数据结构是否为红黑树 or 链表</span><br>        <span class="hljs-comment">// 若是红黑树，则直接在树中插入 or 更新键值对</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value); -&gt;&gt;分析<span class="hljs-number">3</span><br><br>        <span class="hljs-comment">// 若是链表,则在链表中插入 or 更新键值对</span><br>        <span class="hljs-comment">// i.  遍历table[i]，判断Key是否已存在：采用equals（） 对比当前遍历节点的key 与 需插入数据的key：若已存在，则直接用新value 覆盖 旧value</span><br>        <span class="hljs-comment">// ii. 遍历完毕后仍无发现上述情况，则直接在链表尾部插入数据</span><br>        <span class="hljs-comment">// 注：新增节点后，需判断链表长度是否&gt;8（8 = 桶的树化阈值）：若是，则把链表转换为红黑树</span><br>        <br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>            <span class="hljs-comment">// 对于ii：若数组的下1个位置，表示已到表尾也没有找到key值相同节点，则新建节点 = 插入节点</span><br>            <span class="hljs-comment">// 注：此处是从链表尾插入，与JDK 1.7不同（从链表头插入，即永远都是添加到数组的位置，原来数组位置的数据则往后移）</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br><br>                    <span class="hljs-comment">// 插入节点后，若链表节点&gt;数阈值，则将链表转换为红黑树</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <br>                        treeifyBin(tab, hash); <span class="hljs-comment">// 树化操作</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 对于i</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-comment">// 更新p指向下一个节点，继续遍历</span><br>                p = e;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 对i情况的后续操作：发现key已存在，直接用新value 覆盖 旧value &amp; 返回旧value</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123; <br>            V oldValue = e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e); <span class="hljs-comment">// 替换旧值时会调用的方法（默认实现为空）</span><br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br><br>    ++modCount;<br><br>    <span class="hljs-comment">// 插入成功后，判断实际存在的键值对数量size &gt; 最大容量threshold</span><br>    <span class="hljs-comment">// 若 &gt; ，则进行扩容 -&gt;&gt;分析4（但单独讲解，请直接跳出该代码块）</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br><br>    afterNodeInsertion(evict);<span class="hljs-comment">// 插入成功时会调用的方法（默认实现为空）</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分析3：putTreeVal(this, tab, hash, key, value)</span><br><span class="hljs-comment">     * 作用：向红黑树插入 or 更新数据（键值对）</span><br><span class="hljs-comment">     * 过程：遍历红黑树判断该节点的key是否与需插入的key 相同：</span><br><span class="hljs-comment">     *      a. 若相同，则新value覆盖旧value</span><br><span class="hljs-comment">     *      b. 若不相同，则插入</span><br><span class="hljs-comment">     */</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">final</span> TreeNode&lt;K,V&gt; <span class="hljs-title">putTreeVal</span><span class="hljs-params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="hljs-function"><span class="hljs-params">                                       <span class="hljs-keyword">int</span> h, K k, V v)</span> </span>&#123;<br>            Class&lt;?&gt; kc = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">boolean</span> searched = <span class="hljs-keyword">false</span>;<br>            TreeNode&lt;K,V&gt; root = (parent != <span class="hljs-keyword">null</span>) ? root() : <span class="hljs-keyword">this</span>;<br>            <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;<br>                <span class="hljs-keyword">int</span> dir, ph; K pk;<br>                <span class="hljs-keyword">if</span> ((ph = p.hash) &gt; h)<br>                    dir = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ph &lt; h)<br>                    dir = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((pk = p.key) == k || (k != <span class="hljs-keyword">null</span> &amp;&amp; k.equals(pk)))<br>                    <span class="hljs-keyword">return</span> p;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((kc == <span class="hljs-keyword">null</span> &amp;&amp;<br>                          (kc = comparableClassFor(k)) == <span class="hljs-keyword">null</span>) ||<br>                         (dir = compareComparables(kc, k, pk)) == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!searched) &#123;<br>                        TreeNode&lt;K,V&gt; q, ch;<br>                        searched = <span class="hljs-keyword">true</span>;<br>                        <span class="hljs-keyword">if</span> (((ch = p.left) != <span class="hljs-keyword">null</span> &amp;&amp;<br>                             (q = ch.find(h, k, kc)) != <span class="hljs-keyword">null</span>) ||<br>                            ((ch = p.right) != <span class="hljs-keyword">null</span> &amp;&amp;<br>                             (q = ch.find(h, k, kc)) != <span class="hljs-keyword">null</span>))<br>                            <span class="hljs-keyword">return</span> q;<br>                    &#125;<br>                    dir = tieBreakOrder(k, pk);<br>                &#125;<br><br>                TreeNode&lt;K,V&gt; xp = p;<br>                <span class="hljs-keyword">if</span> ((p = (dir &lt;= <span class="hljs-number">0</span>) ? p.left : p.right) == <span class="hljs-keyword">null</span>) &#123;<br>                    Node&lt;K,V&gt; xpn = xp.next;<br>                    TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);<br>                    <span class="hljs-keyword">if</span> (dir &lt;= <span class="hljs-number">0</span>)<br>                        xp.left = x;<br>                    <span class="hljs-keyword">else</span><br>                        xp.right = x;<br>                    xp.next = x;<br>                    x.parent = x.prev = xp;<br>                    <span class="hljs-keyword">if</span> (xpn != <span class="hljs-keyword">null</span>)<br>                        ((TreeNode&lt;K,V&gt;)xpn).prev = x;<br>                    moveRootToFront(tab, balanceInsertion(root, x));<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure><hr><h4 id="get过程-amp-源码"><a href="#get过程-amp-源码" class="headerlink" title="get过程&amp;源码"></a>get过程&amp;源码</h4><div align=center>    <img src="/img/java基础/2.png" style="zoom:75%;" /></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据键key，向HashMap获取对应的值</span><br><span class="hljs-comment">   */</span> <br>   map.get(key);<br><br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 源码分析</span><br><span class="hljs-comment">   */</span> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">// 1. 计算需获取数据的hash值</span><br>    <span class="hljs-comment">// 2. 通过getNode（）获取所查询的数据 -&gt;&gt;分析1</span><br>    <span class="hljs-comment">// 3. 获取后，判断数据是否为空</span><br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.value;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 分析1：getNode(hash(key), key))</span><br><span class="hljs-comment">   */</span> <br><span class="hljs-function"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title">getNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-keyword">int</span> n; K k;<br><br>    <span class="hljs-comment">// 1. 计算存放在数组table中的位置</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<br><br>        <span class="hljs-comment">// 4. 通过该函数，依次在数组、红黑树、链表中查找（通过equals（）判断）</span><br>        <span class="hljs-comment">// a. 先在数组中找，若存在，则直接返回</span><br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>            ((k = first.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br><br>        <span class="hljs-comment">// b. 若数组中没有，则到红黑树中寻找</span><br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 在树中get</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br><br>            <span class="hljs-comment">// c. 若红黑树中也没有，则通过遍历，到链表中寻找</span><br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="hashmap扩容"><a href="#hashmap扩容" class="headerlink" title="hashmap扩容"></a>hashmap扩容</h4><ul><li><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分析4：resize（）</span><br><span class="hljs-comment">     * 该函数有2种使用情况：1.初始化哈希表 2.当前数组容量过小，需扩容</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table; <span class="hljs-comment">// 扩容前的数组（当前数组）</span><br>    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length; <span class="hljs-comment">// 扩容前的数组的容量 = 长度</span><br>    <span class="hljs-keyword">int</span> oldThr = threshold;<span class="hljs-comment">// 扩容前的数组的阈值</span><br>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 针对情况2：若扩容前的数组容量超过最大值，则不再扩充</span><br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br><br>        <span class="hljs-comment">// 针对情况2：若无超过最大值，就扩充为原来的2倍</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 通过右移扩充2倍</span><br>    &#125;<br><br>    <span class="hljs-comment">// 针对情况1：初始化哈希表（采用指定 or 默认值）</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br><br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br><br>    <span class="hljs-comment">// 计算新的resize上限</span><br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br><br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>    table = newTab;<br><br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 把每个bucket都移动到新的buckets中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 当前桶位不为空</span><br>                oldTab[j] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 清掉旧的桶</span><br><br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>) <span class="hljs-comment">// 如果当前节点为节点尾部</span><br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e; <span class="hljs-comment">// 新的位置为取模位置</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">// 如果是红黑树</span><br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br><br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 链表优化重hash的代码块</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-comment">// 原索引（新增的高位为0）</span><br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//这里是和 oldCap 相与，而不是oldCap-1</span><br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-comment">// 原索引 + oldCap（新增的高位为1）</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-comment">// 原索引放到bucket里</span><br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                        loTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-comment">// 原索引+oldCap放到bucket里</span><br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>扩容流程（含 与 <code>JDK 1.7</code> 的对比）</p><div align=center>    <img src="/img/java基础/3.png" style="zoom:50%;" /></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Synchronized(2)-轻量级锁</title>
    <link href="/2021/03/08/Synchronized(2)-%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/"/>
    <url>/2021/03/08/Synchronized(2)-%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h3 id="轻量级锁加-解锁"><a href="#轻量级锁加-解锁" class="headerlink" title="轻量级锁加/解锁"></a>轻量级锁加/解锁</h3><ul><li><h4 id="轻量级锁加锁"><a href="#轻量级锁加锁" class="headerlink" title="轻量级锁加锁"></a>轻量级锁加锁</h4><ul><li><p>线程在执行同步块之前，JVM会先在当前<strong>线程的栈桢中</strong>创建用于存储锁记录的空间（<strong>Lock Record</strong>）。将对象头中的Mark Word复制到锁记录中，官方称为<strong>Displaced Mark Word</strong>；并将Object reference字段指向锁对象。</p><div align=center>    <img src="/img/juc/3.png" style="zoom:50%;" /></div></li><li><p>然后线程尝试使用CAS将对象头中的<strong>Mark Word</strong>替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用<strong>自旋</strong>来获取锁。</p><ul><li><p>如果<strong>更新成功</strong>，该线程就拥有了该对象的锁，并且将对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态</p><div align=center>    <img src="/img/juc/4.png" style="zoom:50%;" /></div></li><li><p>如果<strong>更新失败</strong>，首先检查对象的Mark Word是否指向当前线程的栈帧，如果是则代表是这是一次<strong>锁重入</strong>，则向当前线程的栈帧中添加一条Displaced Mark Word为null，Object reference字段指向锁对象的Lock Record，用来<strong>统计重入的次数</strong>。</p><div align=center>    <img src="/img/juc/5.png" style="zoom:50%;" /></div></li></ul></li><li><p>如果<strong>更新失败</strong>，且对象的Mark Word<strong>不指向当前线程的栈帧</strong>。说明存在多个线程竞争锁，当前线程便尝试使用<strong>自旋</strong>来获取锁。如果自旋获取锁失败，那么轻量级锁就要<strong>膨胀为重量级锁</strong>，将对象头Mark Word中的锁标志状态值（最后两位）修改“10”，并将其指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。</p></li></ul></li><li><h4 id="轻量级锁解锁"><a href="#轻量级锁解锁" class="headerlink" title="轻量级锁解锁"></a>轻量级锁解锁</h4><ul><li>遍历线程栈，找到所有Object reference字段等于当前锁对象的Lock Record；</li><li>如果Lock Record的Displaced Mark Word<strong>为null</strong>，代表这是一次<strong>重入</strong>，将obj设置为null即可；</li><li>轻量级解锁时，会使用<strong>CAS操作</strong>将对象头的MarkWord恢复成<strong>之前的MarkWord</strong>（Displaced Mark Word），如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</li></ul><p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争。</p></li></ul><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><blockquote><p>内核态与用户态的切换上不容易优化，但通过<strong>自旋锁</strong>可以<strong>减少</strong>线程阻塞造成的<strong>线程切换</strong>。对于锁的竞争不激烈且占用锁时间非常短的情况，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，减少线程阻塞造成的线程切换，可以得到较大的性能提升</p></blockquote><ul><li><p>流程：</p><ul><li>当前线程竞争锁失败时，会<strong>自旋</strong>（空等待，比如一个空的有限for循环）一会；</li><li>在自旋的同时重新竞争锁；</li><li>如果自旋结束前获得了锁，那么锁获取成功；否则，自旋结束后阻塞自己。</li></ul></li><li><p>缺点：</p><p>如果锁竞争的时间比较长（竞争激烈的情况下），那么自旋通常不能获得锁，白白浪费了自旋占用的CPU时间。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Synchronized(1)-偏向锁</title>
    <link href="/2021/03/08/Synchronized(1)-%E5%81%8F%E5%90%91%E9%94%81/"/>
    <url>/2021/03/08/Synchronized(1)-%E5%81%8F%E5%90%91%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>JDK1.6 引入了偏向锁、轻量级锁。它们的引入是为了解决在没有多线程竞争或基本没有竞争的场景下因使用传统锁机制带来的性能开销问题。</p><p>本文将重点介绍偏向锁的实现。</p><h3 id="synchronized的基本使用与实现原理"><a href="#synchronized的基本使用与实现原理" class="headerlink" title="synchronized的基本使用与实现原理"></a>synchronized的基本使用与实现原理</h3><ul><li><h4 id="synchronized的表现形式"><a href="#synchronized的表现形式" class="headerlink" title="synchronized的表现形式"></a><strong>synchronized的表现形式</strong></h4><ul><li><p>synchronized修饰普通方法，锁的是<code>this</code>引用指向的对象</p></li><li><p>synchronized修饰静态方法，锁的是当前类的class对象</p></li><li><p>修饰代码块：锁的是引用指向的对象（对象里面的锁）</p></li></ul></li><li><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><blockquote><p><strong>synchronized对普通方法和代码块进行加锁</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncBlock</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;<br>      System.out.println(<span class="hljs-string">&quot;hello block&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncMethod</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello method&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过 JDK 自带的 <code>javap</code> 命令对class文件反编译，查看 <code>SynchronizedDemo</code> 类的相关字节码信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncBlock</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: dup<br>         <span class="hljs-number">2</span>: astore_1<br>         <span class="hljs-number">3</span>: monitorenter        <span class="hljs-comment">// monitorenter指令进入同步块</span><br>         <span class="hljs-number">4</span>: getstatic           <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-number">7</span>: ldc                 <span class="hljs-comment">// String hello block</span><br>         <span class="hljs-number">9</span>: invokevirtual       <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">12</span>: aload_1<br>        <span class="hljs-number">13</span>: monitorexit         <span class="hljs-comment">// monitorexit指令退出同步块</span><br>        <span class="hljs-number">14</span>: goto          <span class="hljs-number">22</span><br>        <span class="hljs-number">17</span>: astore_2<br>        <span class="hljs-number">18</span>: aload_1<br>        <span class="hljs-number">19</span>: monitorexit         <span class="hljs-comment">// monitorexit指令退出同步块</span><br>        <span class="hljs-number">20</span>: aload_2<br>        <span class="hljs-number">21</span>: athrow<br>        <span class="hljs-number">22</span>: <span class="hljs-keyword">return</span><br>      Exception table:<br>         from    to  target type<br>             <span class="hljs-number">4</span>    <span class="hljs-number">14</span>    <span class="hljs-number">17</span>   any<br>            <span class="hljs-number">17</span>    <span class="hljs-number">20</span>    <span class="hljs-number">17</span>   any<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncMethod</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC, ACC_SYNCHRONIZED  <span class="hljs-comment">//添加了ACC_SYNCHRONIZED标记</span><br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: getstatic          <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-number">3</span>: ldc                <span class="hljs-comment">// String hello method</span><br>         <span class="hljs-number">5</span>: invokevirtual      <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>         <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</strong></p><ol><li><p>当执行 <code>monitorenter</code> 指令时，线程试图获取锁也就是获取 <strong>对象监视器 <code>monitor</code></strong> 的持有权。</p><blockquote><p>在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由<a href="https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp">ObjectMonitor</a>实现的。每个对象中都内置了一个 <code>ObjectMonitor</code>对象。</p><p>另外，**<code>wait/notify</code>等方法也依赖于<code>monitor</code>对象，这就是为什么只有在同步的块或者方法中才能调用<code>wait/notify</code>等方法，否则会抛出<code>java.lang.IllegalMonitorStateException</code>的异常的原因。**</p></blockquote></li><li><p>在执行<code>monitorenter</code>时，进入竞争锁流程，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。</p></li><li><p>在执行 <code>monitorexit</code> 指令后，进入释放锁流程，将锁计数器设为 0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p></li></ol></li><li><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。JVM 通过该 <code>ACC_SYNCHRONIZED</code> 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p></li></ul></li></ul><h3 id="Java对象头-amp-amp-MarkWord"><a href="#Java对象头-amp-amp-MarkWord" class="headerlink" title="Java对象头 &amp;&amp; MarkWord"></a>Java对象头 &amp;&amp; MarkWord</h3><blockquote><p>首先markword存在Java对象的对象头里，它主要用来表示对象的线程锁状态。</p></blockquote><p>对象头包含MarkWorld、KlassWord、（如果是数组类型，还会包括）数组长度。</p><ul><li><p><strong>Java对象头里的Mark World</strong>里默认存储对象的<strong>HashCode</strong>、<strong>分代年龄</strong>和<strong>锁标记位</strong>。</p></li><li><p><strong>Klass Word</strong>是一个指向方法区中Class信息的指针，意味着该对象可随时知道自己是哪个Class的实例；</p></li><li><p><strong>数组长度</strong>也是占用64位（8字节）的空间，这是可选的，只有当本对象是一个数组对象时才会有这个部分；</p><div align=center>    <img src="/img/juc/1.jpg" style="zoom:50%;" /></div></li></ul><h3 id="synchronized-偏向锁"><a href="#synchronized-偏向锁" class="headerlink" title="synchronized-偏向锁"></a>synchronized-偏向锁</h3><blockquote><p>大多数情况下，锁不存在多线程竞争，而且由同一线程多次获得，偏向锁的引入降低了线程获得锁的代价。</p></blockquote><ul><li><p><strong>对象创建</strong></p><blockquote><p>当新创建一个对象的时候，如果该对象所属的class<strong>没有关闭偏向锁模式</strong>，那新创建对象的 <code>mark word </code>将是可偏向状态，此时 <code>mark word中 </code>的线程 id为0，表示处于匿名偏向状态。</p></blockquote></li><li><p><strong>偏向锁流程</strong></p><ul><li><p>当该对象第一次被线程获得锁的时候，发现是<strong>匿名偏向状态</strong>(anonymously biased)，则会用CAS指令，将 <code>mark word </code>中的thread id由0改成当前线程Id；</p></li><li><p>当被偏向的线程再次进入同步块时，无需CAS操作；</p><blockquote><p>只会往当前线程的栈帧中添加一条Displaced Mark Word为空的Lock Record，用来统计重入的次数。当<strong>退出同步块</strong>的时候会释放偏向锁时，则依次<strong>删除对应Lock Record</strong>，但是不会修改对象头中的Thread Id。</p></blockquote></li><li><p>当其他线程进入同步块时，发现对象锁被占用，则会替换失败，进入到 <strong>撤销偏向锁</strong> 的逻辑；</p><ol><li>偏向锁的撤销需要等待<strong>全局安全点</strong>（safe point，在该状态下所有线程都是暂停的），检查持有偏向锁的线程是否存活，如果线程还<strong>存活</strong>并且<strong>在执行同步代码块中的代码</strong>（遍历线程栈中的所有<strong>Lock Record</strong>），则升级为<strong>轻量级锁</strong>；</li><li>如果持有偏向锁的线程<strong>未存活</strong>，或者持有偏向锁的线程<strong>未在执行同步代码块中的代码</strong>，则进行校验是否允许重偏向，如果不允许重偏向，则撤销偏向锁，将Mark Word设置为无锁状态，然后升级为轻量级锁，进行CAS竞争锁；</li><li>如果允许重偏向，设置为<strong>匿名偏向锁状态</strong>，CAS将偏向锁重新指向新线程；</li></ol><div align=center>    <img src="/img/juc/2.png" style="zoom:75%;" /></div></li></ul></li><li><p><strong>偏向锁参数设置</strong></p><blockquote><p>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：-XX:BiasedLockingStartupDelay=0。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数<strong>关闭偏向锁</strong>：-XX:-UseBiasedLocking=false，那么程序默认会进入轻量级锁状态。</p></blockquote></li><li><p><strong>批量重偏向与撤销</strong></p><blockquote><p>从上文偏向锁的加锁解锁过程中可以看出，当只有一个线程反复进入同步块时，偏向锁带来的性能开销基本可以忽略，但是当有其他线程尝试获得锁时，就需要等到safe point时将偏向锁撤销为无锁状态或升级为轻量级/重量级锁。而在该状态下所有线程都是暂停的，所以偏向锁的撤销是有一定成本的，如果说<strong>运行时的场景本身存在多线程竞争的，那偏向锁的存在不仅不能提高性能，而且会导致性能下降</strong>。因此，JVM中增加了一种批量重偏向/撤销的机制。</p></blockquote><ul><li><p><strong>原理：</strong><br>对象所属的类 class 中， 会保存一个 epoch 值，每一次该class的对象发生偏向撤销操作时，该值+1。当这个值达到重偏向阈值（默认20）时，JVM就认为该class的偏向锁有问题，因此会进行批量重偏向。当这个值达到批量撤销阈值（默认40）时，就会执行批量撤销。此外还有一个time阈值（默认25s）用来重置epoch 值，如果自从上次执行批量重偏向已经超过了这个阈值时间，就会发生epoch 重置。</p></li><li><p><strong>批量重偏向：</strong><br>发生批量重偏向时，将class中的epoch值+1，同时遍历JVM中所有线程栈， 找到该class所有正处于加锁状态的偏向锁对象，将其对象的epoch字段改为class中epoch的新值。下次获得锁时，发现当前对象的epoch值和class的epoch不相等（说明该对象目前没有线程在执行同步块），所以算当前对象已经偏向了其他线程，也<strong>不会执行撤销操作，而是可以直接通过CAS操作将其Mark Word的Thread Id 改成当前线程Id</strong>。</p></li><li><p><strong>批量撤销：</strong><br>当达到重偏向阈值后，假设该class计数器继续增长，当其达到批量撤销的阈值后（默认40），JVM就认为该class的使用场景存在多线程竞争，会标记该class为不可偏向，之后，对于该class的锁，直接走轻量级锁的逻辑。</p></li><li><p><strong>解决场景：</strong></p><ol><li>一个线程创建了大量对象（属于同一类型）并执行了初始的同步操作，之后在另一个线程中将这些对象作为锁进行之后的操作，这样会导致大量的偏向锁撤销操作。</li><li>存在明显多线程竞争的场景下使用偏向锁是不合适的。</li></ol><p>批量重偏向机制是为了解决第一种场景，批量撤销则是为了解决第二种场景。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>binlog和redolog</title>
    <link href="/2021/03/07/MySQL%E7%9A%84binlog%E5%92%8Credolog/"/>
    <url>/2021/03/07/MySQL%E7%9A%84binlog%E5%92%8Credolog/</url>
    
    <content type="html"><![CDATA[<h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><ul><li><p><strong>什么是binlog</strong></p><p><code>binlog</code>是一种逻辑日志，用于记录数据库执行的写入性操作，并且它是由<code>Server</code>层（使用任何存储引擎的<code>mysql</code>数据库都会记录）进行记录，以二进制的形式保存在磁盘中。</p><blockquote><p>逻辑日志：<strong>可以简单理解为记录的就是sql语句</strong>。</p><p>物理日志：<strong>因为<code>mysql</code>数据最终是保存在数据页中的，物理日志记录的就是数据页变更</strong>。</p></blockquote><p><code>binlog</code>是通过<strong>追加</strong>的方式进行写入的，可以通过<code>max_binlog_size</code>参数设置每个<code>binlog</code>文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。</p></li><li><p><strong>binlog使用场景</strong></p><blockquote><p>在实际应用中，<code>binlog</code>的主要使用场景有两个，分别是<strong>主从复制</strong>和<strong>数据恢复</strong>。</p></blockquote><ul><li><strong>主从复制</strong>：在<code>Master</code>端开启<code>binlog</code>，然后将<code>binlog</code>发送到各个<code>Slave</code>端，<code>Slave</code>端重放<code>binlog</code>从而达到主从数据一致。</li><li><strong>数据恢复</strong>：通过使用<code>mysqlbinlog</code>工具来恢复数据。</li></ul></li><li><p><strong>binlog刷盘时机</strong></p><p>对于<code>InnoDB</code>存储引擎而言，只有在事务提交时才会记录<code>binlog</code>，此时记录还在内存中，那么<code>biglog</code>是什么时候刷到磁盘中的呢？<code>mysql</code>通过<code>sync_binlog</code>参数控制<code>binlog</code>的刷盘时机，取值范围是<code>0-N</code>：</p><ul><li>0：不去强制要求，由系统自行判断何时写入磁盘；</li><li>1：每次<code>commit</code>的时候都要将<code>binlog</code>写入磁盘；</li><li>N：每N个事务，才会将<code>binlog</code>写入磁盘。</li></ul><p>从上面可以看出，<code>sync_binlog</code>最安全的是设置是<code>1</code>，这也是<code>MySQL 5.7.7</code>之后版本的默认值。但是设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。</p></li><li><p><strong>binlog日志格式</strong></p><p><code>binlog</code>日志有三种格式，分别为<code>STATMENT</code>、<code>ROW</code>和<code>MIXED</code>。</p><blockquote><p>在 <code>MySQL 5.7.7</code>之前，默认的格式是<code>STATEMENT</code>，<code>MySQL 5.7.7</code>之后，默认值是<code>ROW</code>。日志格式通过<code>binlog-format</code>指定。</p></blockquote><ul><li><code>STATMENT</code> <strong>基于</strong><code>SQL</code><strong>语句的复制(</strong><code>statement-based replication, SBR</code><strong>)，每一条会修改数据的sql语句会记录到</strong><code>binlog</code><strong>中</strong>。优点：<strong>不需要记录每一行的变化，减少了</strong><code>binlog</code><strong>日志量，节约了</strong><code>IO</code><strong>, 从而提高了性能</strong>；缺点：<strong>在某些情况下会导致主从数据不一致，比如执行</strong><code>sysdate()</code><strong>、</strong><code>slepp()</code><strong>等</strong>。</li><li><code>ROW</code> <strong>基于行的复制(</strong><code>row-based replication, RBR</code><strong>)，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了</strong>。优点：<strong>不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题</strong>；缺点：<strong>会产生大量的日志，尤其是</strong><code>alter table</code><strong>的时候会让日志暴涨</strong></li><li><code>MIXED</code> <strong>基于</strong><code>STATMENT</code><strong>和</strong><code>ROW</code><strong>两种模式的混合复制(</strong><code>mixed-based replication, MBR</code><strong>)，一般的复制使用</strong><code>STATEMENT</code><strong>模式保存</strong><code>binlog</code><strong>，对于</strong><code>STATEMENT</code><strong>模式无法复制的操作使用</strong><code>ROW</code><strong>模式保存</strong><code>binlog</code></li></ul></li></ul><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><ul><li><p><strong>为什么需要redo log</strong>？</p><p><strong>redolog是InnoDB引擎特有的日志，主要是用来提升Mysql的更新效率的。</strong>因为如果每一次的更新操作都写进磁盘，然后磁盘也要找到那条记录，然后再更新，整个过程IO成本、查找成本都很高。</p><ul><li><p>它是一种<strong>WAL</strong>技术（Write-Ahea Logging），关键点就是MySQL 的每次写操作并不是立刻写到磁盘上，而是先记录在日志上，然后在合适的时间再更新到磁盘上。</p></li><li><p>并且它还可以保证<strong>crash-safe</strong>，就是说，即使数据库发生异常重启，之前提交的记录也不会丢失。</p><blockquote><p>IO性能问题：</p><ul><li>因为<code>Innodb</code>是以<code>页</code>为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！</li><li>一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！</li></ul></blockquote></li></ul></li><li><p><strong>redo log 的刷盘策略</strong></p><p><code>redo log</code>包括两部分：一个是内存中的日志缓冲(<code>redo log buffer</code>)，另一个是磁盘上的日志文件(<code>redo log file</code>)。</p><p><code>mysql</code>每执行一条<code>DML</code>语句，先将记录写入<code>redo log buffer</code>，后续某个时间点再一次性将多个操作记录写到<code>redo log file</code>。</p><blockquote><p>在操作系统中，用户空间(<code>user space</code>)下的缓冲区数据一般情况下是先写入操作系统内核空间(<code>kernel space</code>)缓冲区(<code>OS Buffer</code>)，再同步到磁盘中。</p></blockquote><div align=center>    <img src="/img/MySQL/21.png" style="zoom:75%;" /></div><p>它的写入同步机制，可以通过<code>innodb_flush_log_at_trx_commit</code>参数配置：</p><blockquote><ul><li>0（延迟写）:事务提交时不会将redo log buffer中日志写入到os buffer，而是每秒写入os buffer并调用fsync()写入到redo log file中。也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据。</li><li>1（实时写，实时刷）:事务每次提交都会将redo log buffer中的日志写入os buffer并调用fsync()刷到redo log file中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO的性能较差。</li><li>2（实时写，延迟刷）:每次提交都仅写入到os buffer，然后是每秒调用fsync()将os buffer中的日志写入到redo log file。</li></ul></blockquote><div align=center>    <img src="/img/MySQL/22.png" style="zoom:75%;" /></div></li><li><p><strong>redo log记录形式</strong></p><p><code>redo log</code>实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志。可以把它当成一个环。</p><blockquote><p><code>redo log</code>实际上记录数据页的变更，而这种变更记录是没必要全部保存；当内存中的脏页刷新到磁盘中后就可以清除掉。</p></blockquote><div align=center>    <img src="/img/MySQL/23.png" style="zoom:50%;" /></div><ul><li><p><code>redolog</code> 有两个指针：<code>write pos</code>：是当前记录的位置，一边写一边后移；</p></li><li><p><code>checkpoint</code> 是当前要擦除的位置，在擦除记录前需要将内存中的操作更新到数据文件。</p></li><li><p>从 <code>write pos</code> 到 <code>checkpoint</code> 是 <code>redolog</code> 空着的部分，可以用来记录新的操作</p></li><li><p>如果 <code>write pos</code> 追上了 <code>checkpoint</code>，表明 <code>redolog</code> 满了，这时候不能再执行新的更新了，这时候需要将内存中的<strong>脏页</strong>刷到磁盘中。更新完之后，<code>checkpoint</code> 就可以继续往前推进。</p><blockquote><p>脏页：跟磁盘数据页内容不一致的内存数据页</p></blockquote></li></ul></li><li><p><strong>mysql的刷脏页（flush）时机</strong></p><ul><li><p>InnoDB的redo log写满了，也就 <code>write pos</code> 追上了 <code>checkpoint</code>，这时候需要将<code>checkpoint</code>后面的日志所对应的脏页<strong>flush</strong>到磁盘上。</p></li><li><p>内存不足的时候，如果需要淘汰掉“脏页”，就要先将脏页写到磁盘里。</p><blockquote><p>为什么不直接淘汰？</p><ul><li>淘汰前必刷盘，为了性能</li><li>这样在读取数据时，如果内存里没有数据，就可以肯定数据文件上是正确的结果，读入内存后返回。</li></ul></blockquote></li><li><p>系统空闲的时候</p></li><li><p>MySQL正常关闭的情况。这时候，MySQL会把内存的脏页都flush到磁<br>盘上，这样下次MySQL启动的时候，就可以直接从磁盘上读数据，启动速度会很快。</p></li></ul></li><li><p><strong>mysql的刷脏页的控制策略</strong></p><blockquote><ol><li>尽量避免redolog写满，整个系统会被堵住，不能再接受新的跟新。</li><li>内存不够用。InnoDB用缓冲池（buffer pool）管理内存，缓冲池中的内存页有三种状态：还没有使用的；使用了并且是干净页；使用了并且是脏页。需要控制脏页的比例。</li></ol></blockquote><ul><li><p>需要设置主机的IO能力，将<strong>innodb_io_capacity</strong>这个参数设置成磁盘的IOPS（全力刷能刷多块）</p></li><li><p><strong>innodb_max_dirty_pages_pct</strong>是脏页比例上限参数，默认值是75%。</p><p>根据<strong>当前的脏页比例</strong>和<strong>当前日志序号与checkPoint的距离</strong>计算出最优百分比，Innodb会按最大性能x这个百分比的速度来刷脏页。</p></li><li><p>innodb_flush_neighbors 参数，“连坐”机制，表示当前要刷的脏页的邻居也是脏页，会顺带刷掉。在机械硬盘中可以减少很多随机IO。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
